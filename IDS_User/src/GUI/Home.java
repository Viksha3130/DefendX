/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Logic.SystemInfo;
import Logic.info;
import Logic.monitor_file_system;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.Socket;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;

/**
 *
 * @author sumit
 */
public class Home extends javax.swing.JFrame {
public static String emp_ID="";
String[] letters = new String[]{ "A", "B", "C", "D", "E", "F", "G", "H", "I","J","K"};
File[] drives = new File[letters.length];
boolean[] isDrive = new boolean[letters.length];
public static String ip="",cluster="",lms_name="",lms_ip="",dir="D:/files/";
public static int counter = 0,lms_port=0; 
public static ArrayList al_initial_file_list=new ArrayList();
public static ArrayList al_initial_file_size=new ArrayList();
public static String vfile="",vfile_name="";
public static long vfile_size=0;
public static int initial_num_files=0,file_check_count=0,write_permission=0,mcount=0;

    /**
     * Creates new form Employee_Home
     */
    public Home(String e,String cluster,String lms_name,String lms_ip,int lms_port) {
        this.emp_ID=e;
        this.cluster=cluster;
        this.lms_name=lms_name;
        this.lms_ip=lms_ip;
        this.lms_port=lms_port;
        initComponents();
        lblWelcome.setText("Employee ID "+e);
        lbl_cluster.setText(cluster);
        lbl_lms.setText(lms_name);
        lbl_lms_ip.setText(lms_ip);
        lbl_lms_port.setText(lms_port+"");
        
        
                SystemInfo si=new SystemInfo();
        ArrayList al=si.info();
        for(int i=0;i<al.size();i++)
        {
        System.out.println(al.get(i).toString());
        }
        si.memInfo();
        si.osName();
        si.osVersion();
        si.totalMem();
        si.usedMem();
        
        
        try {
         ip=InetAddress.getLocalHost().getHostAddress().toString();
         this.ip=ip;
         detect5(ip);
         dir=dir+""+e+"/";
            System.out.println("Monitoring dir "+dir);
         File f=new File(dir);
         if(!f.exists())
         {
         f.mkdirs();
         }
         
         new monitor_file_system();
         new Logic.listener();
//         try{
//                        Socket soc=new Socket(Employee_Home.lms_ip,Employee_Home.lms_port);
//                        ObjectOutputStream out=new ObjectOutputStream(soc.getOutputStream());
//                        out.writeUTF("new_node");
//                        out.writeUTF(Employee_Home.emp_ID);
//                        out.writeUTF(Employee_Home.ip);
//                        
//                        out.close();
//                        soc.close();
//            
//            
//                        }catch(Exception e1)
//                        {
//                        e1.printStackTrace();
//                        }
     } catch (Exception ex) {
        ex.printStackTrace();
     }
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblWelcome = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lbl_cluster = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lbl_lms = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lbl_lms_ip = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lbl_lms_port = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblWelcome.setText("jLabel1");

        jLabel1.setText("jLabel1");

        jLabel2.setText("Cluster");

        lbl_cluster.setText("cluster");

        jLabel3.setText("LMS");

        lbl_lms.setText("LMS");

        jLabel4.setText("LMS IP   ");

        lbl_lms_ip.setText("LMS IP");

        jLabel5.setText("LMS Port");

        lbl_lms_port.setText("LMP Port    ");

        jButton1.setText("Send Request");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbl_lms, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbl_cluster, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbl_lms_ip, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbl_lms_port))))
                        .addGap(353, 353, 353))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(434, 434, 434)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblWelcome)
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lbl_cluster))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lbl_lms))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lbl_lms_ip)
                    .addComponent(jButton1))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(lbl_lms_port))
                .addContainerGap(200, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        jMenuItem1.setText("Logout");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
            try{
            Socket soc=new Socket(info.cms_ip,info.cms_port);
            ObjectOutputStream out=new ObjectOutputStream(soc.getOutputStream());
            out.writeUTF("logout");
            out.writeUTF(emp_ID);
           
            out.close();
            soc.close();
            JOptionPane.showMessageDialog(null, "Logout Successfully");
            this.dispose();
            
            }catch(Exception e)
            {
            e.printStackTrace();
            }
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        
        new vhrvk().setVisible(true);
        
//        System.out.println("______aaaa_________");
//        String demp_id=jComboBox2.getSelectedItem().toString();
//        String msg=jTextArea1.getText().toString();
//        System.out.println(demp_id+"   &&&&&&&&&&     "+msg);
//        try{
//            Socket soc=new Socket(info.cms_ip,info.cms_port);
//            ObjectOutputStream out=new ObjectOutputStream(soc.getOutputStream());
//            out.writeUTF("send_data");
//         
//            out.writeUTF(demp_id);
//            out.writeUTF(msg);
//            out.writeUTF(ip);
//            out.writeLong(System.currentTimeMillis());
//            out.close();
//            soc.close();
//            
//        }catch(Exception e)
//        {
//        e.printStackTrace();
//        }
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
          ex.printStackTrace();
        } 
          /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               // new Employee_Home("0").setVisible(true);
            }
        });
    }
    public  void detect5(String ip)
    {
        
        this.ip=ip;
      
     //   this.setSize(400, 300);
        initComponents();
        
        
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    
    
    
    final long THIRTY_MINUTES = 1800000;
    final java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("mm : ss");
    int x = 0;
    ActionListener al = new ActionListener(){
      long x = THIRTY_MINUTES - 1000;
      public void actionPerformed(ActionEvent ae){
        jLabel1.setText(sdf.format(new Date(x)));
        x += 1000;}
    
    
    
    };
    new javax.swing.Timer(1000, al).start();
//    ip=InetAddress.getLocalHost().getHostAddress().toString();
   detect(ip);
     
    }
public  void detect(String cip)        

    {
       
   
    
    // init the file objects and the initial drive state
    for ( int i = 0;i < letters.length; ++i )
        {
        drives[i] = new File(letters[i]+":/");

        isDrive[i] = drives[i].canRead();
        }

     System.out.println("FindDrive: waiting for devices...");
Timer timer = new Timer(); 
timer.scheduleAtFixedRate(new TimerTask()
{ 
     int count=0;
    int n1=1;
public void run() 
{ 
    lable2: if(counter!=7000)
    {
counter++; 
System.out.println(counter); 
     // loop indefinitely
    
     label1 :  while(true)
        {
            
            
            
        // check each drive 
        for ( int i = 0; i < letters.length; ++i )
            {
               // System.out.println(i);
            boolean pluggedIn = drives[i].canRead();

            // if the state has changed output a message
            if ( pluggedIn != isDrive[i] )
                {
                if ( pluggedIn )
        {
              if(count<0)
            {
                
                
                System.out.println("==================================================================");
                    System.out.println("Drive "+letters[i]+" has been plugged in");
                 
               //     pop.pop1();
                    count++;
                    System.out.println("kkkkkkkkkkkkkkkk"+count);
                   
                    
            }
              else
            {
                
                
                
                System.out.println("pendrive detected");
                    try{
                        System.out.println(lms_ip);
                        System.out.println(lms_port);
                    Socket soc=new Socket(lms_ip,lms_port);
                    ObjectOutputStream out=new ObjectOutputStream(soc.getOutputStream());
                    out.writeUTF("alert");
                    out.writeUTF("pendrive");
                    out.writeUTF(ip);
                    out.close();
                    soc.close();
                    }catch(Exception e)
                    {
                    e.printStackTrace();
                    }
                
                
                 Runtime runtime = Runtime.getRuntime();
                try
                {
                   System.out.println("Shutting down the PC after 5 seconds.");
                   runtime.exec("shutdown -s -t 5");
                }
                catch(Exception e)
                {
                   System.out.println("Exception: " +e);
                }
              
                
//              String urlString = "";
//                        
//        if(urlString.equalsIgnoreCase("logout"))
//        {
//        
//        File f=new File("E:/files/");
//        File arr[]=f.listFiles();
//        for(int ii=0;ii<arr.length;ii++)
//        {
//        arr[ii].delete();
//        
//        }
//        
//        }
           // DBQuery db=new DBQuery();
        
//                  try {
//                      int  j = db.names(name,val,"Pevdrive");
//                  } catch (ClassNotFoundException ex) {
//                      Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
//                  } catch (SQLException ex) {
//                      Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
//                  }
         
               // System.exit(0);
            
            }
        }
                else
        {
                    System.out.println("Drive "+letters[i]+" has been unplugged");
        
        }

                isDrive[i] = pluggedIn;
                }
            if(i==letters.length-1)
            {
               // System.out.println("kkkkkkk");
                break label1;
  
            }
            }

        // wait before looping
       // try { Thread.sleep(100); }
       // catch (InterruptedException e) { /* do nothing */ }

        }
     }
    else
    {
        
     System.out.println("k"); 
     System.exit(0);
 
    }
} 
}
        , new Date(), 10000); 
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblWelcome;
    private javax.swing.JLabel lbl_cluster;
    private javax.swing.JLabel lbl_lms;
    private javax.swing.JLabel lbl_lms_ip;
    private javax.swing.JLabel lbl_lms_port;
    // End of variables declaration//GEN-END:variables
}
